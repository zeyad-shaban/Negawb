# Generated by Django 3.0.8 on 2020-08-19 14:34

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('categories', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('bio', models.CharField(blank=True, default='I love this website!', max_length=400, null=True)),
                ('avatar', models.ImageField(default='profile_images/DefaultUserImage.WebP', upload_to='profile_images')),
                ('is_online', models.BooleanField(default=False)),
                ('show_email', models.BooleanField(default=False)),
                ('who_see_avatar', models.CharField(choices=[('none', 'No One'), ('friends', 'Friends Only'), ('everyone', 'Every One')], default='friends', max_length=30)),
                ('who_add_group', models.CharField(choices=[('none', 'No One'), ('friends', 'Friends Only'), ('everyone', 'Every One')], default='friends', max_length=30)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('is_trusted', models.BooleanField(default=False)),
                ('allow_friend_request', models.BooleanField(default=True)),
                ('hide_comments', models.BooleanField(default=False)),
                ('chat_only_mode', models.BooleanField(default=False)),
                ('hide_posts_in_homepage', models.BooleanField(default=False)),
                ('fixed_navbar', models.BooleanField(default=True)),
                ('allow_important_friend_messages', models.BooleanField(default=True)),
                ('allow_important_group_message', models.BooleanField(default=True)),
                ('allow_normal_friend_message', models.BooleanField(default=True)),
                ('allow_normal_group_message', models.BooleanField(default=True)),
                ('allow_comment_message', models.BooleanField(default=True)),
                ('allow_reply_message', models.BooleanField(default=True)),
                ('allow_invites', models.BooleanField(default=True)),
                ('your_invites', models.BooleanField(default=True)),
                ('blocked_categories', models.ManyToManyField(blank=True, related_name='blocked_categories', to='categories.Category')),
                ('followers', models.ManyToManyField(blank=True, related_name='user_followers', to=settings.AUTH_USER_MODEL)),
                ('friends', models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('homepage_posts', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='categories.Category')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
